{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","text","this","setState","classes","textJson","JSON","parse","e","className","Grid","container","root","direction","spacing","item","xs","TextField","multiline","label","rows","rowsMax","Infinity","variant","placeholder","onChange","updateText","target","value","alignContent","src","indentWidth","React","Component","withStyles","theme","flexGrow","grid","marginLeft","marginRight","paper","fontWeight","fontSize","width","control","padding","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2SAoCMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,IAHS,E,8CAOnB,SAAWA,GACTC,KAAKC,SAAS,CAAEF,W,oBAGlB,WAAU,IAAD,OACCG,EAAYF,KAAKH,MAAjBK,QAEJC,EAAW,GACf,IACEA,EAAWC,KAAKC,MAAML,KAAKF,MAAMC,MACjC,MAAOO,IAIT,OACE,sBAAKC,UAAU,MAAf,UACE,8BACE,4BACE,8FAGJ,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACF,UAAWL,EAAQQ,KAAMC,UAAU,MAAMC,QAAS,EAAlE,UACE,cAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAf,SACE,cAACC,EAAA,EAAD,CACER,UAAWL,EAAQc,UACnBA,WAAS,EACTC,MAAM,YACNC,KAAM,GACNC,QAASC,IACTC,QAAQ,WACRC,YAAatB,KAAKF,MAAMC,KACxBwB,SAAU,SAACjB,GACT,EAAKkB,WAAWlB,EAAEmB,OAAOC,YAI/B,cAAClB,EAAA,EAAD,CAAMK,MAAI,EAACc,aAAa,aAAab,GAAI,EAAzC,SACE,cAAC,IAAD,CAAWc,IAAKzB,EAAU0B,YAAa,gB,GA7CjCC,IAAMC,WAqDTC,eAhFA,SAACC,GAAD,MAAY,CACzBvB,KAAM,CACJwB,SAAU,GAEZC,KAAM,CACJC,WAAYH,EAAMrB,QAAQ,GAC1ByB,YAAaJ,EAAMrB,QAAQ,IAE7B0B,MAAO,CACLC,WAAY,OACZC,SAAU,OACVC,MAAO,QAETC,QAAS,CACPC,QAASV,EAAMrB,QAAQ,IAEzBI,UAAW,CACToB,WAAYH,EAAMrB,QAAQ,GAC1ByB,YAAaJ,EAAMrB,QAAQ,GAE3B2B,WAAY,OACZC,SAAU,OACVI,MAAO,SACPH,MAAO,WAyDIT,CAAmBpC,GC7EnBiD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b694ceb5.chunk.js","sourcesContent":["import React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\n\nimport ReactJson from \"react-json-view\";\n\nimport \"./App.css\";\n\nconst styles = (theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  grid: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  paper: {\n    fontWeight: \"bold\",\n    fontSize: \"20px\",\n    width: \"45vw\",\n  },\n  control: {\n    padding: theme.spacing(2),\n  },\n  multiline: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n\n    fontWeight: \"bold\",\n    fontSize: \"20px\",\n    color: \"purple\",\n    width: \"45vw\",\n  },\n});\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"\",\n    };\n  }\n\n  updateText(text) {\n    this.setState({ text });\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    var textJson = {};\n    try {\n      textJson = JSON.parse(this.state.text);\n    } catch (e) {\n      // do nothing\n    }\n\n    return (\n      <div className=\"App\">\n        <div>\n          <p>\n            <h1>年轻人的第一个JSON Formatter</h1>\n          </p>\n        </div>\n        <Grid container className={classes.root} direction=\"row\" spacing={3}>\n          <Grid item xs={6}>\n            <TextField\n              className={classes.multiline}\n              multiline\n              label=\"Multiline\"\n              rows={10}\n              rowsMax={Infinity}\n              variant=\"outlined\"\n              placeholder={this.state.text}\n              onChange={(e) => {\n                this.updateText(e.target.value);\n              }}\n            />\n          </Grid>\n          <Grid item alignContent=\"flex-start\" xs={6}>\n            <ReactJson src={textJson} indentWidth={8} />\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}